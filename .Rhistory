library(styler)
styler::style_file("Afigure_1_bias_distribution.R")
styler::style_file("/Users/lizlimpoco/Library/CloudStorage/GoogleDrive-liz.limpoco@uhasselt.be/My Drive/PhD/Working papers/Biometrical Journal/Codes_and_Data/Appendix Figures/scripts/Afigure_1_bias_distribution.R", style = tidyverse_style())
styler::style_file("/Users/lizlimpoco/Library/CloudStorage/GoogleDrive-liz.limpoco@uhasselt.be/My Drive/PhD/Working papers/Biometrical Journal/Codes_and_Data/Appendix Figures/scripts/Afigure_1_bias_distribution.R", style = styler::tidyverse_style())
styler::style_file("/Users/lizlimpoco/Library/CloudStorage/GoogleDrive-liz.limpoco@uhasselt.be/My Drive/PhD/Working papers/Biometrical Journal/Codes_and_Data/Appendix Figures/scripts/Afigure_1_bias_distribution.R", style = tidyverse_style
)
styler::style_file("/Users/lizlimpoco/Library/CloudStorage/GoogleDrive-liz.limpoco@uhasselt.be/My Drive/PhD/Working papers/Biometrical Journal/Codes_and_Data/Appendix Figures/scripts/Afigure_4_aic.R", style = tidyverse_style)
.Machine$double.eps
p <- 2
n <- 120
x.length <- n * p
(p^2 - p)/2
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
p <- 3
n <- 120
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
p <- 2
n <- 120
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
p <- 2
n <- 320
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
p <- 3
n <- 320
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
p <- 3
n <- 520
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
p <- 3
n <- 868
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
p <- 2
n <- 868
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
p <- 3
n <- 868
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
p <- 2
n <- 868
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
p <- 3
n <- 868
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
p <- 2
n <- 868
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
p <- 3
n <- 868
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
p <- 3
n <- 868
x.length <- n * p
num.const <- 2*p + (p^2 - p)/2 +    #mean and covmat
2*p +                             #uv 3rd and 4th order
2*choose(p, 2) +                  #bv 3rd order
ifelse(p > 2, choose(p, 3), 0) +  #tv 3rd order
3*choose(p, 2) +                  #bv 4th order
ifelse(p > 2, 3*choose(p, 3), 0) +#tv 4th order
ifelse(p > 3, choose(p, 4), 0)    #qv 4th order
x.length/num.const
66*9
# Empty the environment
rm(list=ls(all=TRUE))
# Load libraries / functions
library(matrixStats)
library(dplyr)
library(pracma)
library(MASS)
library(skimr)
library(lme4)
cite(binomial)
citation(binomial)
citation("binomial")
citation("R")
citation("pracma")
citation("base")
p <- 9
p + (p^2-p)/2 + 5*choose(p,2) + 4*choose(p,3) + choose(p,4)
687/9
1311179-3001467
glm.fit
glm
library(pracma)
library(Rfast)
66 * 2
2^5
2^10
3^10
generate_sum_n_nonneg <- function(n, nprime) {
# Generate n-1 sorted numbers between 0 and nprime
cuts <- sort(sample(0:nprime, n-1))
c(cuts[1], diff(cuts), nprime - cuts[n-1])
}
# Example:
set.seed(123)
generate_sum_n_nonneg(5, 20)
sum(generate_sum_n_nonneg(5, 20))
setwd("~/Library/CloudStorage/GoogleDrive-liz.limpoco@uhasselt.be/My Drive/PhD/Working papers/Biometrical Journal/Mixed-effects-logistic-regression-from-summary-statistics")
# Load packages
library(reshape2)
library(ggplot2)
library(cowplot)
# Call function/s
source(file.path("Figures", "scripts_and_functions", "fn_figure_2_bias_distribution.R"))
# Tabulate settings
settings <- data.frame(setting = 1:3,
m = c(30, 50, 100),
uniform_cluster_size = c(100, 60, 30))
# Plot biases
nsim <- 1000
bias_plots <- lapply(1:nrow(settings), function(setting){
m <- settings$m[setting]
uniform_cluster_size <- settings$uniform_cluster_size[setting]
bias.df <- fn_bias(nsim, m, uniform_cluster_size)
ggplot(bias.df, aes(x = factor(pars, levels = c("b0",
"b1",
"b2",
"b32",
"b33",
"sig.u")),
y = bias, fill = dat)) +
geom_boxplot() +
geom_hline(yintercept = 0, col = "red") +
scale_x_discrete(labels = c("b0" = expression(beta[0]),
"b1" = expression(beta[1]),
"b2" = expression(beta[2]),
"b32" = expression(beta[32]),
"b33" = expression(beta[33]),
"sig.u" = expression(sigma[u]))) +
xlab("") +
ggtitle(paste0("m = ", m, "; n = ", uniform_cluster_size)) +
theme(plot.title = element_text(hjust = 0.5))
})
plot_grid(plotlist = bias_plots, ncol = 1)
postscript(file.path("Figures", "outputs", "fig2_bias.eps"), onefile = F)
plot_grid(plotlist = bias_plots, ncol = 1)
dev.off()
# Load packages
library(reshape2)
library(ggplot2)
library(cowplot)
# Call function/s
source(file.path("Figures", "scripts_and_functions", "fn_figure_6_mis_0.R"))
# Tabulate settings
settings <- data.frame(setting = 1:3,
m = c(30, 50, 100),
uniform_cluster_size = c(100, 60, 30))
settings$name <- factor(paste("m =", settings$m,
", n =", settings$uniform_cluster_size),
levels = paste("m =", settings$m,
", n =", settings$uniform_cluster_size))
settings$name <- paste("m =", settings$m,
", n =", settings$uniform_cluster_size)
# Tabulate true parameter values
lookup_df <- data.frame(num = 1:5,
name = c("sig.u", "b0", "b1",
"b32", "b33"),
symbol = I(list(expression(sigma[u]),
expression(beta[0]),
expression(beta[1]),
expression(beta[32]),
expression(beta[33]))),
true = c(sqrt(32), -4.20753, 0.33348,
1.20088, 0.53604))
# Plot biases
nsim <- 1000
bias_plots <- lapply(1:nrow(settings), function(setting){
m <- settings$m[setting]
uniform_cluster_size <- settings$uniform_cluster_size[setting]
bias.df <- fn_bias(nsim, m, uniform_cluster_size)
ggplot(bias.df, aes(x = factor(pars, levels = c("b0",
"b1",
"b32",
"b33",
"sig.u")),
y = bias, fill = dat)) +
geom_boxplot() +
geom_hline(yintercept = 0, col = "red") +
scale_x_discrete(labels = c("b0" = expression(beta[0]),
"b1" = expression(beta[1]),
"b32" = expression(beta[32]),
"b33" = expression(beta[33]),
"sig.u" = expression(sigma[u]))) +
xlab("") +
ggtitle(paste0("m = ", m, "; n = ", uniform_cluster_size)) +
theme(plot.title = element_text(hjust = 0.5))
})
plot_grid(plotlist = bias_plots, ncol = 1)
postscript(file.path("Figures", "outputs", "fig6a_bias_mis_0.eps"), onefile = F)
plot_grid(plotlist = bias_plots, ncol = 1)
dev.off()
# Compute coverage and plot them
nsim = 1000
coverage.all <- lapply(1:nrow(lookup_df), function(parnum){
coverage.ls <- lapply(1:nrow(settings), function(setting){
m <- settings$m[setting]
uniform_cluster_size <- settings$uniform_cluster_size[setting]
df <- data.frame(
coverage = 100 *
fn_coverage(nsim, m, uniform_cluster_size, parnum, lookup_df),
setting = rep(paste("m =", m,", n =", uniform_cluster_size), 4))
df$type = row.names(df); row.names(df) <- NULL
df
})
coverage.df <- do.call(rbind, coverage.ls)
parname <- lookup_df$name[match(parnum, lookup_df$num)]
parsym <- lookup_df$symbol[match(parnum, lookup_df$num)]
coverage.df$par <- rep(parname, nrow(coverage.df))
ggplot(coverage.df, aes(x = factor(setting,
levels = settings$name),
y = coverage, group = type)) +
geom_line(aes(color = type)) + geom_point(aes(color = type)) +
ylab("coverage (%)") + xlab("") +
geom_hline(yintercept = 95, color = "red") +
geom_hline(yintercept = c(93.6,96.4), color = "red", lty = 2) +
ggtitle(parsym[[1]]) + theme(plot.title = element_text(hjust=0.5))
})
legend <- get_legend(coverage.all[[1]] + theme(legend.position = "right"))
coverage.all <- lapply(coverage.all, function(plot) plot +
theme(legend.position = "none"))
pg.par <- plot_grid(plotlist = coverage.all, ncol = 2)
plot_grid(pg.par, legend, rel_widths = c(1, 0.075))
postscript(file.path("Figures", "outputs", "fig6b_coverage_mis_0.eps"), onefile = F)
plot_grid(pg.par, legend, rel_widths = c(1, 0.075))
dev.off()
